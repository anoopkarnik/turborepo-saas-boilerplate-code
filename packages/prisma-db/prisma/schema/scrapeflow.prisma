model Workflow {
    id         String   @id @default(cuid())
    userId     String
    name       String
    description String?

    definition String
    executionPlan String?
    creditsCost Int    @default(0)

    status    String  // DRAFT | PUBLISHED

    cron      String? // * * * * * (every minute)

    lastRunAt  DateTime?
    lastRunId  String?
    lastRunStatus String?
    nextRunAt  DateTime?

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    executions WorkflowExecution[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@schema("scrapeflow_schema")
    @@unique([userId, name])
 
}

model WorkflowExecution {
    id         String   @id @default(cuid())
    workflowId String
    userId     String
    trigger    String
    status     String
    startedAt  DateTime?
    completedAt DateTime?
    createdAt  DateTime @default(now())
    definition String   @default("{}")

    creditsConsumed Int @default(0)

    phases ExecutionPhase[]

    workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

    @@schema("scrapeflow_schema")
}

model ExecutionPhase {
    id         String   @id @default(cuid())
    userId     String
    status     String
    number     Int
    node       String
    name      String
    startedAt  DateTime?
    completedAt DateTime?
    inputs    String?
    outputs   String?

    creditsConsumed Int? 
    workflowExecutionId String

    workflowExecution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

    logs ExecutionLog[]

    @@schema("scrapeflow_schema")
}

model ExecutionLog {
    id         String   @id @default(cuid())
    logLevel    String
    message     String
    timestamp   DateTime @default(now())

    executionPhaseId String

    executionPhase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)

    @@schema("scrapeflow_schema")
}