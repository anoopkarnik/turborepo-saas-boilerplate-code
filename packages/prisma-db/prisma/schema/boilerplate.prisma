model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String
  email         String          @unique
  emailVerified Boolean         @default(false)
  image         String?
  role          String          @default("user")
  banned        Boolean         @default(false)
  bannedReason  String?
  banExpires    Int?

  access        AccountAccess   @default(TRIAL)
  creditsUsed   Int             @default(0)
  creditsTotal  Int             @default(20)

  accounts      Account[]
  sessions      Session[]

  connections   Connection[]
  notifications Notification[]
  workflows     Workflow[]
  userToProjects UserToGithubProject[]
  questionsAsked    Question[]
  messengerUser  MessengerUser?
  twitterUser   TwitterUser?

  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@schema("boilerplate_schema")

}

model Account {
  id                     String   @id @default(cuid()) @map("_id")
  userId                 String  
  providerId             String  
  accountId              String    
  refreshToken           String?   
  accessToken            String?   
  accessTokenExpiresAt   DateTime?       
  refreshTokenExpiresAt  DateTime?      
  scope                  String?
  idToken                String?   
  password               String?  
 
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("boilerplate_schema")

}

model Session {
  id             String   @id @default(cuid())  @map("_id")
  token          String   
  userId         String  
  expiresAt      DateTime 

  userAgent    String?
  ipAddress      String?
  impersonatedBy String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("boilerplate_schema")
}

model Verification {
  id        String   @id @default(cuid()) @map("_id")
  identifier String
  value     String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@schema("boilerplate_schema")
}

model jwks {
  id        String   @id @default(cuid()) @map("_id")
  publicKey String
  privateKey String

  createdAt DateTime @default(now())

  @@schema("boilerplate_schema")
}

enum AccountAccess {
  TRIAL
  PRO
  ENTERPRISE
  UNLIMITED
  @@schema("boilerplate_schema")
}

model Connection {
  id               String          @id @default(uuid())
  name             String          @default("New Connection")
  description      String?
  connection       String?
  type             String
  details          String          @default("{}")
  User             User          @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId           String

  createdAt        DateTime        @default(now())  
  updatedAt        DateTime        @updatedAt

  @@unique([userId, name])

  @@schema("boilerplate_schema")
}

model Notification {
  id               String          @id @default(uuid())
  userId           String
  type             String
  message          String
  href             String?
  read             Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("boilerplate_schema")
}

model UserFinancial {
  id            String          @id @default(cuid())
  userId        String        @unique
  customerId    String
  name          String
  email         String
  city          String
  country       String
  state         String
  street        String
  zipcode       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  

  @@schema("boilerplate_schema")
}

model UserPurchase {
  id            String          @id @default(cuid())
  userId        String
  eventId       String
  description   String
  amount        Int
  currency      String
  date          DateTime @default(now())
  @@schema("boilerplate_schema")
}
