model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole @default(USER)
  accounts      Account[]
  sessions      Session[]
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@schema("boilerplate_schema")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@schema("boilerplate_schema")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@schema("boilerplate_schema")
}
 
model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
 
  @@unique([email,token])
  @@schema("boilerplate_schema")
}
 
model ResetPasswordToken {
  id        String   @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
 
  @@unique([email,token])
  @@schema("boilerplate_schema")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  from      String
  subject   String
  html      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@schema("boilerplate_schema")
}

enum UserRole {
  USER
  ADMIN
  @@schema("boilerplate_schema")
}