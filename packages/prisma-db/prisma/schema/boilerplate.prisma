model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  access        AccountAccess   @default(TRIAL)
  creditsUsed    Int             @default(0)
  accounts      Account[]
  sessions      Session[]
  connections   Connection[]
  notifications Notification[]
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@schema("boilerplate_schema")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@schema("boilerplate_schema")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  device       String?
  ipAddress    String?
  location     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@schema("boilerplate_schema")
}
 
model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
 
  @@unique([email,token])
  @@schema("boilerplate_schema")
}
 
model ResetPasswordToken {
  id        String   @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime
 
  @@unique([email,token])
  @@schema("boilerplate_schema")
}

enum UserRole {
  USER
  ADMIN
  @@schema("boilerplate_schema")
}

enum AccountAccess {
  TRIAL
  PRO
  ENTERPRISE
  UNLIMITED
  @@schema("boilerplate_schema")
}

model Connection {
  id               String          @id @default(uuid())
  name             String          @default("New Connection")
  type             String
  details          Json 
  User             User?           @relation(fields: [userId], references: [id])
  userId           String?

  createdAt        DateTime        @default(now())  
  updatedAt        DateTime        @updatedAt

  @@schema("boilerplate_schema")
}

model Notification {
  id               String          @id @default(uuid())
  userId           String
  type             String
  message          String
  href             String?
  read             Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("boilerplate_schema")
}